{"code":"import { Observable } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\nimport { UInt16, UInt32, UInt8 } from '../Types';\r\nimport { PacketEvent } from './PacketEvent';\r\nexport class PacketStream {\r\n    constructor(...packetTypes) {\r\n        const keyValueArray = packetTypes.map(packetClass => [new packetClass().packetType, packetClass]);\r\n        this.packetTypeMap = new Map(keyValueArray);\r\n        if (packetTypes.length > 0) {\r\n            const structureMetadata = new packetTypes[0]().structureMetadata;\r\n            const packetTypeMetadata = structureMetadata.packetType;\r\n            this.fieldType = packetTypeMetadata.type;\r\n        }\r\n    }\r\n    attachToStream(readable) {\r\n        return Observable.create(observer => {\r\n            if (this.fieldType === undefined) {\r\n                throw {\r\n                    name: 'Packet Stream Missing Types Error',\r\n                    message: 'Attempted to attach to ReadStream without any specified packet types'\r\n                };\r\n            }\r\n            this.lockReadbleToSubscriber(readable, observer);\r\n            const numberOfRequiredBytes = this.fieldType.size;\r\n            const listener = () => {\r\n                if (readable.readableLength >= numberOfRequiredBytes) {\r\n                    const data = readable.read(numberOfRequiredBytes);\r\n                    const type = this.readTypedFieldFromBuffer(data);\r\n                    const incomingPacketType = this.packetTypeMap.get(type);\r\n                    if (incomingPacketType !== undefined) {\r\n                        readable.removeListener('readable', listener);\r\n                        readable.unshift(data);\r\n                        const packet = new incomingPacketType();\r\n                        packet.readFrom(readable).subscribe(() => {\r\n                            const event = new PacketEvent();\r\n                            event.packetType = type;\r\n                            event.packetClass = incomingPacketType;\r\n                            event.packet = packet;\r\n                            observer.next(event);\r\n                            process.nextTick(() => {\r\n                                listener();\r\n                            });\r\n                            readable.on('readable', listener);\r\n                        });\r\n                    }\r\n                    else {\r\n                        let errorHandled = false;\r\n                        const event = new PacketEvent({\r\n                            continue: () => {\r\n                                process.nextTick(() => {\r\n                                    listener();\r\n                                });\r\n                                errorHandled = true;\r\n                            },\r\n                            reset: () => {\r\n                                readable.read();\r\n                                errorHandled = true;\r\n                            },\r\n                            ignore: () => {\r\n                                readable.removeListener('readable', listener);\r\n                                readable.once('readable', () => {\r\n                                    readable.on('readable', listener);\r\n                                });\r\n                                readable.unshift(data);\r\n                                errorHandled = true;\r\n                            }\r\n                        });\r\n                        event.packetType = type;\r\n                        event.packetClass = undefined;\r\n                        event.packet = undefined;\r\n                        observer.next(event);\r\n                        if (!errorHandled) {\r\n                            throw {\r\n                                name: 'Uncaught Packet Stream Unexpected Packet Error',\r\n                                message: 'Encountered unknown packet type in ReadStream.'\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            readable.on('readable', listener);\r\n            listener();\r\n        }).pipe(share());\r\n    }\r\n    addPacketType(packetType) {\r\n        const instance = new packetType();\r\n        if (this.fieldType === undefined) {\r\n            const structureMetadata = instance.structureMetadata;\r\n            const packetTypeMetadata = structureMetadata.packetType;\r\n            this.fieldType = packetTypeMetadata.type;\r\n        }\r\n        this.packetTypeMap.set(instance.packetType, packetType);\r\n    }\r\n    removePacketType(packetType) {\r\n        this.packetTypeMap.delete(new packetType().packetType);\r\n    }\r\n    lockReadbleToSubscriber(readable, subscriber) {\r\n        if (readable[READABLE_LOCK_SYMBOL] !== undefined) {\r\n            throw {\r\n                name: 'Packet Stream Concurrency Error',\r\n                message: 'Attempted to attach more than one PacketStream to the same ReadStream.'\r\n            };\r\n        }\r\n        readable[READABLE_LOCK_SYMBOL] = true;\r\n        const unsubscribe = subscriber.unsubscribe.bind(subscriber);\r\n        subscriber.unsubscribe = () => {\r\n            readable[READABLE_LOCK_SYMBOL] = undefined;\r\n            unsubscribe();\r\n        };\r\n    }\r\n    readTypedFieldFromBuffer(buffer) {\r\n        switch (this.fieldType) {\r\n            case UInt8:\r\n                return buffer.readUInt8(0);\r\n            case UInt16:\r\n                return buffer.readUInt16BE(0);\r\n            case UInt32:\r\n                return buffer.readUInt32BE(0);\r\n        }\r\n    }\r\n}\r\nconst READABLE_LOCK_SYMBOL = Symbol('PacketStreamLock');\r\n//# sourceMappingURL=PacketStream.js.map","map":"{\"version\":3,\"file\":\"PacketStream.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../lib/PacketStream/PacketStream.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Chris/Projects/ts-packet/PacketStream/PacketStream.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport ReadStream = NodeJS.ReadStream;\r\nimport { Observable } from 'rxjs';\r\nimport { AbstractPacket } from '../AbstractPacket';\r\nimport { Class, UInt16, UInt32, UInt8 } from '../Types';\r\nimport { PacketEvent } from './PacketEvent';\r\nexport declare type PacketTypeTypes = UInt8 | UInt16 | UInt32;\r\nexport interface TypedPacket<T extends PacketTypeTypes> extends AbstractPacket {\r\n    packetType: T;\r\n}\r\nexport declare class PacketStream<T extends PacketTypeTypes> {\r\n    private readonly packetTypeMap;\r\n    private fieldType;\r\n    constructor(...packetTypes: Class<TypedPacket<T>>[]);\r\n    attachToStream(readable: ReadStream): Observable<PacketEvent<T>>;\r\n    addPacketType(packetType: Class<TypedPacket<T>>): void;\r\n    removePacketType(packetType: Class<TypedPacket<T>>): void;\r\n    private lockReadbleToSubscriber;\r\n    private readTypedFieldFromBuffer;\r\n}\r\n"}}
