{"code":"import { BUFFER_OFFSET_SYMBOL, Int16, Int32, Int8, isTypeDescendantOfAbstractPacket, UInt16, UInt32, UInt8, UTF8String } from './Types';\r\nexport function readTypedFieldFromBuffer(buffer, fieldStructure) {\r\n    if (fieldStructure.type instanceof Array) {\r\n        return readTypedArrayFromBuffer(buffer, fieldStructure);\r\n    }\r\n    else if (fieldStructure.type.name === undefined) {\r\n        return readTypedObjectLiteralFromBuffer(buffer, fieldStructure);\r\n    }\r\n    else if (isTypeDescendantOfAbstractPacket(fieldStructure.type)) {\r\n        return readSubpacketFromBuffer(buffer, fieldStructure);\r\n    }\r\n    else {\r\n        return readTypedPrimitiveFromBuffer(buffer, fieldStructure);\r\n    }\r\n}\r\nexport function readTypedArrayFromBuffer(buffer, fieldStructure) {\r\n    return new Array(fieldStructure.length)\r\n        .fill(undefined)\r\n        .map(_ => readTypedFieldFromBuffer(buffer, { type: fieldStructure.type[0] }));\r\n}\r\nexport function readTypedObjectLiteralFromBuffer(buffer, fieldStructure) {\r\n    return Object.assign({}, ...Object.entries(fieldStructure.type).map(([subfield, subfieldStructure]) => ({ [subfield]: readTypedFieldFromBuffer(buffer, { type: subfieldStructure }) })));\r\n}\r\nexport function readSubpacketFromBuffer(buffer, fieldStructure) {\r\n    const subpacket = new fieldStructure.type();\r\n    const subpacketBuffer = buffer.slice(buffer[BUFFER_OFFSET_SYMBOL]);\r\n    subpacket.data = subpacketBuffer;\r\n    buffer[BUFFER_OFFSET_SYMBOL] += subpacketBuffer[BUFFER_OFFSET_SYMBOL];\r\n    return subpacket;\r\n}\r\nexport function readTypedPrimitiveFromBuffer(buffer, fieldStructure) {\r\n    const offset = buffer[BUFFER_OFFSET_SYMBOL];\r\n    switch (fieldStructure.type) {\r\n        case UInt8:\r\n        case Int8:\r\n        case UInt16:\r\n        case Int16:\r\n        case UInt32:\r\n        case Int32:\r\n            buffer[BUFFER_OFFSET_SYMBOL] += fieldStructure.type.size;\r\n            break;\r\n        case UTF8String:\r\n        case Buffer:\r\n            buffer[BUFFER_OFFSET_SYMBOL] += fieldStructure.length;\r\n            break;\r\n        default:\r\n            throw {\r\n                name: 'Packet Field Type Error',\r\n                message: 'Unrecognized fixed width type.'\r\n            };\r\n    }\r\n    switch (fieldStructure.type) {\r\n        case UInt8:\r\n            return buffer.readUInt8(offset);\r\n        case Int8:\r\n            return buffer.readInt8(offset);\r\n        case UInt16:\r\n            return buffer.readUInt16BE(offset);\r\n        case Int16:\r\n            return buffer.readInt16BE(offset);\r\n        case UInt32:\r\n            return buffer.readUInt32BE(offset);\r\n        case Int32:\r\n            return buffer.readInt32BE(offset);\r\n        case UTF8String:\r\n            return buffer.toString('utf8', offset, offset + fieldStructure.length);\r\n        case Buffer:\r\n            return buffer.slice(offset, offset + fieldStructure.length);\r\n    }\r\n}\r\n//# sourceMappingURL=BufferReadUtils.js.map","map":"{\"version\":3,\"file\":\"BufferReadUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../lib/BufferReadUtils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Chris/Projects/ts-packet/BufferReadUtils.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport { AbstractPacket } from './AbstractPacket';\r\nimport { PacketFieldArrayType, PacketFieldComplexType, PacketFieldPrimitive, PacketFieldStructureMetadata } from './Types';\r\nexport declare function readTypedFieldFromBuffer(buffer: Buffer, fieldStructure: PacketFieldStructureMetadata): any;\r\nexport declare function readTypedArrayFromBuffer(buffer: Buffer, fieldStructure: PacketFieldStructureMetadata<PacketFieldArrayType>): any;\r\nexport declare function readTypedObjectLiteralFromBuffer(buffer: Buffer, fieldStructure: PacketFieldStructureMetadata<PacketFieldComplexType>): any;\r\nexport declare function readSubpacketFromBuffer(buffer: Buffer, fieldStructure: PacketFieldStructureMetadata<AbstractPacket>): AbstractPacket;\r\nexport declare function readTypedPrimitiveFromBuffer(buffer: Buffer, fieldStructure: PacketFieldStructureMetadata<PacketFieldPrimitive>): string | number | Buffer;\r\n"}}
