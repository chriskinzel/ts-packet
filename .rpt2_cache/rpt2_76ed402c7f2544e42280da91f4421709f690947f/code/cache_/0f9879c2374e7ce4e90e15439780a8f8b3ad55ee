{"code":"import { concat, Observable } from 'rxjs';\r\nimport { map, toArray } from 'rxjs/operators';\r\nimport { readTypedFieldFromBuffer } from './BufferReadUtils';\r\nimport { typedFieldToBuffer } from './BufferWriteUtils';\r\nimport { readTypedFieldFromReadable } from './ReadableReadUtils';\r\nimport { BUFFER_OFFSET_SYMBOL, PACKET_STRUCTURE_SYMBOL } from './Types';\r\nexport class AbstractPacket {\r\n    writeTo(writable) {\r\n        return Observable.create(observer => {\r\n            const write = () => {\r\n                writable.write(this.data, error => {\r\n                    if (error === undefined || error === null) {\r\n                        observer.next();\r\n                        observer.complete();\r\n                    }\r\n                    else {\r\n                        observer.error(error);\r\n                    }\r\n                });\r\n            };\r\n            if (writable.writable) {\r\n                write();\r\n            }\r\n            else {\r\n                writable.once('drain', write);\r\n            }\r\n        });\r\n    }\r\n    readFrom(readable) {\r\n        return concat(...Object.entries(this.structureMetadata)\r\n            .map(([field, fieldStructure]) => readTypedFieldFromReadable(readable, fieldStructure).pipe(map(value => [field, value]))))\r\n            .pipe(toArray(), map(entries => Object.assign(this, ...entries.map(([k, v]) => ({ [k]: v })))));\r\n    }\r\n    set data(data) {\r\n        data[BUFFER_OFFSET_SYMBOL] = 0;\r\n        Object.entries(this.structureMetadata)\r\n            .forEach(([field, fieldStructure]) => {\r\n            this[field] = readTypedFieldFromBuffer(data, fieldStructure);\r\n        });\r\n    }\r\n    get data() {\r\n        return Buffer.concat(Object.entries(this.structureMetadata)\r\n            .map(([field, fieldStructure]) => typedFieldToBuffer(this[field], fieldStructure)));\r\n    }\r\n    get structureMetadata() {\r\n        return Object.getPrototypeOf(this)[PACKET_STRUCTURE_SYMBOL];\r\n    }\r\n}\r\n//# sourceMappingURL=AbstractPacket.js.map","map":"{\"version\":3,\"file\":\"AbstractPacket.js\",\"sourceRoot\":\"\",\"sources\":[\"../../lib/AbstractPacket.ts\"],\"names\":[],\"mappings\":\"AAGA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,MAAM,CAAC;AACxC,OAAO,EAAC,GAAG,EAAE,OAAO,EAAC,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAC,wBAAwB,EAAC,MAAM,mBAAmB,CAAC;AAC3D,OAAO,EAAC,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAC,0BAA0B,EAAC,MAAM,qBAAqB,CAAC;AAC/D,OAAO,EAAC,oBAAoB,EAAE,uBAAuB,EAA+B,MAAM,SAAS,CAAC;AAEpG,MAAM,OAAgB,cAAc;IAEzB,OAAO,CAAC,QAAwB;QACnC,OAAO,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YAChC,MAAM,KAAK,GAAG,GAAG,EAAE;gBACf,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;wBACvC,QAAQ,CAAC,IAAI,EAAE,CAAC;wBAChB,QAAQ,CAAC,QAAQ,EAAE,CAAC;qBACvB;yBAAM;wBACH,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACzB;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC;YAEF,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACnB,KAAK,EAAE,CAAC;aACX;iBAAM;gBACH,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACjC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,QAAQ,CAAC,QAAoB;QAChC,OAAO,MAAM,CAAC,GACV,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;aACjC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,cAAc,CAAyC,EAAE,EAAE,CACrE,0BAA0B,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,IAAI,CACrD,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAC/B,CACJ,CAAC;aACL,IAAI,CACD,OAAO,EAAE,EACT,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAC,CAAC,CAAE,CAAC,CAAC,CAChF,CAAC;IACV,CAAC;IAED,IAAW,IAAI,CAAC,IAAY;QACxB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAE/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;aACjC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,cAAc,CAAyC,EAAE,EAAE;YACzE,IAAI,CAAC,KAAK,CAAC,GAAG,wBAAwB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACX,CAAC;IAED,IAAW,IAAI;QACX,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;aACtD,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,cAAc,CAAyC,EAAE,EAAE,CACrE,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,cAAc,CAAC,CAClD,CAAC,CAAC;IACX,CAAC;IAED,IAAY,iBAAiB;QACzB,OAAO,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,uBAAuB,CAAC,CAAC;IAChE,CAAC;CACJ\"}","dts":{"name":"/Users/Chris/Projects/ts-packet/AbstractPacket.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport WritableStream = NodeJS.WritableStream;\r\nimport ReadStream = NodeJS.ReadStream;\r\nimport { Observable } from 'rxjs';\r\nexport declare abstract class AbstractPacket {\r\n    writeTo(writable: WritableStream): Observable<void>;\r\n    readFrom(readable: ReadStream): Observable<this>;\r\n    data: Buffer;\r\n    private readonly structureMetadata;\r\n}\r\n"}}
