{"code":"import { concat, Observable } from 'rxjs';\r\nimport { map, toArray } from 'rxjs/operators';\r\nimport { readTypedPrimitiveFromBuffer } from './BufferReadUtils';\r\nimport { BUFFER_OFFSET_SYMBOL, isTypeDescendantOfAbstractPacket } from './types/Types';\r\nexport function readTypedFieldFromReadable(readable, fieldStructure) {\r\n    if (fieldStructure.type instanceof Array) {\r\n        return readTypedArrayFromReadable(readable, fieldStructure);\r\n    }\r\n    else if (fieldStructure.type.name === undefined) {\r\n        return readTypedObjectLiteralFromReadable(readable, fieldStructure);\r\n    }\r\n    else if (isTypeDescendantOfAbstractPacket(fieldStructure.type)) {\r\n        return readSubpacketFromReadable(readable, fieldStructure);\r\n    }\r\n    else {\r\n        return readTypedPrimitiveFromReadable(readable, fieldStructure);\r\n    }\r\n}\r\nexport function readTypedArrayFromReadable(readable, fieldStructure) {\r\n    return concat(...new Array(fieldStructure.length)\r\n        .fill(undefined)\r\n        .map(_ => readTypedFieldFromReadable(readable, { type: fieldStructure.type[0] }))).pipe(toArray());\r\n}\r\nexport function readTypedObjectLiteralFromReadable(readable, fieldStructure) {\r\n    return concat(...Object.entries(fieldStructure.type)\r\n        .map(([subfield, subfieldStructure]) => readTypedFieldFromReadable(readable, { type: subfieldStructure }).pipe(map(value => [subfield, value]))))\r\n        .pipe(toArray(), map(entries => Object.assign({}, ...entries.map(([k, v]) => ({ [k]: v })))));\r\n}\r\nexport function readSubpacketFromReadable(readable, fieldStructure) {\r\n    const subpacket = new fieldStructure.type();\r\n    return subpacket.readFrom(readable);\r\n}\r\nexport function readTypedPrimitiveFromReadable(readable, fieldStructure) {\r\n    return Observable.create(observer => {\r\n        const numberOfRequiredBytes = (fieldStructure.length !== undefined)\r\n            ? fieldStructure.length\r\n            : fieldStructure.type.size;\r\n        let attachedListener = false;\r\n        const listener = () => {\r\n            if (readable.readableLength >= numberOfRequiredBytes) {\r\n                const data = readable.read(numberOfRequiredBytes);\r\n                data[BUFFER_OFFSET_SYMBOL] = 0;\r\n                if (attachedListener) {\r\n                    readable.removeListener('readable', listener);\r\n                }\r\n                observer.next(readTypedPrimitiveFromBuffer(data, fieldStructure));\r\n                observer.complete();\r\n            }\r\n            else if (!attachedListener) {\r\n                attachedListener = true;\r\n                readable.on('readable', listener);\r\n            }\r\n        };\r\n        listener();\r\n    });\r\n}\r\n//# sourceMappingURL=ReadableReadUtils.js.map","map":"{\"version\":3,\"file\":\"ReadableReadUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../lib/ReadableReadUtils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Chris/Projects/ts-packet/ReadableReadUtils.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport { Observable } from 'rxjs';\r\nimport { AbstractPacket } from './AbstractPacket';\r\nimport { PacketFieldArrayType, PacketFieldComplexType, PacketFieldPrimitive, PacketFieldStructureMetadata } from './types/Types';\r\nimport ReadStream = NodeJS.ReadStream;\r\nexport declare function readTypedFieldFromReadable(readable: ReadStream, fieldStructure: PacketFieldStructureMetadata): any;\r\nexport declare function readTypedArrayFromReadable(readable: ReadStream, fieldStructure: PacketFieldStructureMetadata<PacketFieldArrayType>): any;\r\nexport declare function readTypedObjectLiteralFromReadable(readable: ReadStream, fieldStructure: PacketFieldStructureMetadata<PacketFieldComplexType>): any;\r\nexport declare function readSubpacketFromReadable(readable: ReadStream, fieldStructure: PacketFieldStructureMetadata<AbstractPacket>): Observable<AbstractPacket>;\r\nexport declare function readTypedPrimitiveFromReadable(readable: ReadStream, fieldStructure: PacketFieldStructureMetadata<PacketFieldPrimitive>): any;\r\n"}}
